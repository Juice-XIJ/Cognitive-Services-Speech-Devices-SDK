package com.microsoft.coginitiveservices.speech.samples.sdsdkstarterapp;import android.os.AsyncTask;import android.os.Bundle;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.Snackbar;import android.support.v7.app.AppCompatActivity;import android.support.v7.widget.Toolbar;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.TextView;import org.json.JSONArray;import org.json.JSONObject;import java.io.BufferedInputStream;import java.io.BufferedReader;import java.io.DataOutputStream;import java.io.File;import java.io.FileInputStream;import java.io.InputStream;import java.io.InputStreamReader;import java.math.BigDecimal;import java.math.BigInteger;import java.net.HttpURLConnection;import java.net.URL;import java.nio.charset.StandardCharsets;import java.util.ArrayList;import java.util.HashMap;import java.util.Random;public class enrollment extends AppCompatActivity {    private HashMap<Integer, Double[]> signatureMap = new HashMap<>();    private Button enrollButton1;    private Button enrollButton2;    private Button enrollButton3;    private Button meetingButton;    private TextView enrollTextView1;    private TextView enrollTextView2;    private TextView enrollTextView3;    private TextView meetingTextView;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_enrollment);        Toolbar toolbar = (Toolbar) findViewById(R.id.meetingToolbar);        enrollButton1 = findViewById(R.id.enrollButton1);        enrollButton2 = findViewById(R.id.enrollButton2);        enrollButton3 = findViewById(R.id.enrollButton3);        meetingButton = findViewById(R.id.meetingButton);        enrollTextView1 = findViewById(R.id.enrollTextView1);        enrollTextView2 = findViewById(R.id.enrollTextView2);        enrollTextView3 = findViewById(R.id.enrollTextView3);        enrollTextView1.setText("");        enrollTextView2.setText("");        enrollTextView3.setText("");        setSupportActionBar(toolbar);        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);        fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)                        .setAction("Action", null).show();            }        });        enrollButton1.setOnClickListener(view ->{            enrollButton1.setEnabled(false);            new enrollTask().execute("1","/video/DictationBatman.wav");        });        enrollButton2.setOnClickListener(view ->{            enrollButton2.setEnabled(false);            new enrollTask().execute("2","/video/case2.wav");        });        enrollButton3.setOnClickListener(view ->{            enrollButton3.setEnabled(false);            new enrollTask().execute("3","/video/pma_processed.wav");        });        meetingButton.setOnClickListener(view ->{            if(enrollTextView1.getText()=="" || enrollTextView2.getText()==""||enrollTextView3.getText()==""){                meetingTextView.setText("Please enroll the meeting attendee first!");            }else{            }        });    }    public class enrollTask extends AsyncTask<String, String, String> {        Double[] signatureId;        @Override        protected String doInBackground(String[] params) {            String enrollId = params[0];            try{                String lineEnd = "\r\n";                String twoHyphens = "--";                String boundary = new BigInteger(256, new Random()).toString();                File wavFile = new File(params[1]);                Log.i("Meeting", "enroll: " + enrollId + " audio file: " + wavFile.getName());                int bytesRead, bytesAvailable, bufferSize;                byte[] buffer;                int maxBufferSize = 1024 * 1024;                URL url = new URL("https://pss.princetondev.customspeech.ai/api/v1/Signature/GenerateVoiceSignatureFromFile");                HttpURLConnection connection = (HttpURLConnection) url.openConnection();                // Allow Inputs &amp; Outputs.                connection.setDoInput(true);                connection.setDoOutput(true);                connection.setUseCaches(false);                // Set HTTP method to POST.                connection.setRequestMethod("POST");                connection.setRequestProperty("accept", "application/json");                connection.setRequestProperty("Content-Type", "multipart/form-data;boundary=" + boundary);                FileInputStream fileInputStream;                DataOutputStream outputStream;                outputStream = new DataOutputStream(connection.getOutputStream());                outputStream.writeBytes(twoHyphens + boundary + lineEnd);                outputStream.writeBytes("Content-Disposition: form-data; name=\"File\";filename=\"" + wavFile.getName() +"\"" + lineEnd);                outputStream.writeBytes(lineEnd);                fileInputStream = new FileInputStream(wavFile);                bytesAvailable = fileInputStream.available();                bufferSize = Math.min(bytesAvailable, maxBufferSize);                Log.i("Meeting", "Buffer size: " + Integer.toString(bufferSize));                buffer = new byte[bufferSize];                // Read file                bytesRead = fileInputStream.read(buffer, 0, bufferSize);                int count = 1;                while (bytesRead > 0) {                    outputStream.write(buffer, 0, bufferSize);                    bytesAvailable = fileInputStream.available();                    bufferSize = Math.min(bytesAvailable, maxBufferSize);                    bytesRead = fileInputStream.read(buffer, 0, bufferSize);                }                outputStream.writeBytes("\r\n--" + boundary + "--");                // Responses from the server (code and message)                int serverResponseCode = connection.getResponseCode();                Log.i("Meeting", "serverResponseCode: " + Integer.toString(serverResponseCode));                String result = null;                if (serverResponseCode == 200) {                    StringBuilder s_buffer = new StringBuilder();                    InputStream is = new BufferedInputStream(connection.getInputStream());                    BufferedReader br = new BufferedReader(new InputStreamReader(is));                    String inputLine;                    while ((inputLine = br.readLine()) != null) {                        s_buffer.append(inputLine);                    }                    result = s_buffer.toString();                    Log.i("Meeting", "Response result: " + result);                    if (result != null) {                        JSONObject signature = new JSONObject(result);                        String status = signature.getString("Status");                        if(status.equals("OK")){                            Log.i("Meeting","Enrollment: Get Signature ID from GenerateVoiceSignatureFromFile is OK");                            JSONObject sr = signature.getJSONObject("Signature");                            JSONArray signaureArray = sr.optJSONArray("Signature");                            signatureId = new Double[signaureArray.length()];                            for(int i = 0; i< signaureArray.length(); i++){                                 signatureId[i] =signaureArray.getDouble(i);                            }                            signatureMap.put(Integer.valueOf(enrollId), signatureId);                        }                    }                }                fileInputStream.close();                outputStream.flush();                outputStream.close();                Log.i("Meeting", "Enrollment is finished: " + enrollId);            } catch (Exception e) {                e.printStackTrace();            }            return enrollId;        }        @Override        protected void onPostExecute(String result) {            switch(result){                case "1" : {                    enrollTextView1.setText("Enrollment1 is successful");                    enrollButton1.setEnabled(true);                    break;                }                case "2" : {                    enrollTextView2.setText("Enrollment2 is successful");                    enrollButton2.setEnabled(true);                    break;                }                case "3" :  {                    enrollTextView3.setText("Enrollment3 is successful");                    enrollButton3.setEnabled(true);                    break;                }                default:            }        }    }}